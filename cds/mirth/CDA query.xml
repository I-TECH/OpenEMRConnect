<channel>
  <id>f5e4cd7b-86f3-4b85-ae6a-d210ba72e60e</id>
  <name>CDA query</name>
  <description>Queries the configured &quot;cds&quot; for any CDAs associated with the given &quot;patient_clinical_id&quot;.

Queries should be HTTP POSTed to this channel in XML format, using the &apos;query=&apos; parameter, such as the following:

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;patientIdentification&gt;
    &lt;cda_id/&gt;
    &lt;identification&gt;123abc&lt;/identification&gt;
    &lt;identificationType&gt;HDSS&lt;/identificationType&gt;
    &lt;requestSource&gt;EMR&lt;/requestSource&gt;
&lt;/patientIdentification&gt;

(Only the &lt;cda_id/&gt; element is considered in the query if defined.  Fall back to &lt;identification/&gt; if not.)

For each matching document found, they will be a &lt;record/&gt; element returned associated with their respective cda_id values in an XML document of the following structure:

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;query_response&gt;
  &lt;record&gt;
    &lt;cda_id&gt;1&lt;/cda_id&gt;
    &lt;patient_clinical_id&gt;pc_id&lt;/patient_clinical_id&gt;
    &lt;last_name&gt;xk~txIvj|r&lt;/last_name&gt;
    &lt;first_name&gt;|jv~nu&lt;/first_name&gt;
    &lt;source_system&gt;OldMRS&lt;/source_system&gt;
    &lt;cda_dob&gt;19560228&lt;/cda_dob&gt;
    &lt;gender&gt;M&lt;/gender&gt;
    &lt;date_generated&gt;20120401&lt;/date_generated&gt;
    &lt;cda&gt;[base64 encoded CDA]&lt;/cda&gt;
  &lt;/record&gt;
&lt;/query_response&gt;

(The CDA itself is base 64 encoded to work around any nested CDATA decryption problems.)

To configure the cds database name, host, port, user &amp; password, alter the connection string at the top of the one destination in this channel.
</description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1333700098341</time>
    <timezone>America/Los_Angeles</timezone>
  </lastModified>
  <revision>132</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">HTTP Listener</property>
      <property name="host">0.0.0.0</property>
      <property name="port">8090</property>
      <property name="receiverBodyOnly">0</property>
      <property name="receiverCharset">UTF-8</property>
      <property name="receiverResponse">httpResponse</property>
      <property name="receiverResponseContentType">text/plain</property>
    </properties>
    <transformer>
      <steps>
        <step>
          <sequenceNumber>0</sequenceNumber>
          <name>decode query XML</name>
          <script>var query = new XML(Packages.java.net.URLDecoder.decode(msg[&apos;Parameters&apos;][&apos;query&apos;].toString()));

channelMap.put(&apos;cda_id&apos;, query[&apos;cdaID&apos;]);
channelMap.put(&apos;id&apos;, query[&apos;identification&apos;]);
channelMap.put(&apos;idType&apos;, query[&apos;identificationType&apos;]);</script>
          <type>JavaScript</type>
          <data class="map">
            <entry>
              <string>Script</string>
              <string>var query = new XML(Packages.java.net.URLDecoder.decode(msg[&apos;Parameters&apos;][&apos;query&apos;].toString()));

channelMap.put(&apos;cda_id&apos;, query[&apos;cdaID&apos;]);
channelMap.put(&apos;id&apos;, query[&apos;identification&apos;]);
channelMap.put(&apos;idType&apos;, query[&apos;identificationType&apos;]);</string>
            </entry>
          </data>
        </step>
      </steps>
      <inboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxIdHRwUmVxdWVzdD48UmVtb3RlQWRkcmVzcz4xMjcuMC4w
LjE8L1JlbW90ZUFkZHJlc3M+PFJlcXVlc3RVcmw+aHR0cDovL2xvY2FsaG9zdDo4MDkwLzwvUmVx
dWVzdFVybD48TWV0aG9kPlBPU1Q8L01ldGhvZD48UmVxdWVzdFBhdGg+PC9SZXF1ZXN0UGF0aD48
UGFyYW1ldGVycz48cXVlcnk+Jmx0Oz94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgi
IHN0YW5kYWxvbmU9InllcyI/Jmd0OwombHQ7cGF0aWVudElkZW50aWZpY2F0aW9uJmd0OwogICAg
Jmx0O2lkZW50aWZpY2F0aW9uJmd0OzEyMyZsdDsvaWRlbnRpZmljYXRpb24mZ3Q7CiAgICAmbHQ7
aWRlbnRpZmljYXRpb25UeXBlJmd0O0NsaW5pY2FsSWQmbHQ7L2lkZW50aWZpY2F0aW9uVHlwZSZn
dDsKICAgICZsdDtyZXF1ZXN0U291cmNlJmd0O1BJUyZsdDsvcmVxdWVzdFNvdXJjZSZndDsKJmx0
Oy9wYXRpZW50SWRlbnRpZmljYXRpb24mZ3Q7CjwvcXVlcnk+PC9QYXJhbWV0ZXJzPjxIZWFkZXI+
PEhvc3Q+bG9jYWxob3N0OjgwOTA8L0hvc3Q+PENvbnRlbnQtTGVuZ3RoPjI0NzwvQ29udGVudC1M
ZW5ndGg+PFVzZXItQWdlbnQ+SmF2YS8xLjYuMF8yOTwvVXNlci1BZ2VudD48Q29udGVudC1UeXBl
PmFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDwvQ29udGVudC1UeXBlPjxDb25uZWN0
aW9uPmtlZXAtYWxpdmU8L0Nvbm5lY3Rpb24+PEFjY2VwdD50ZXh0L2h0bWwsIGltYWdlL2dpZiwg
aW1hZ2UvanBlZywgKjsgcT0uMiwgKi8qOyBxPS4yPC9BY2NlcHQ+PFByYWdtYT5uby1jYWNoZTwv
UHJhZ21hPjxDYWNoZS1Db250cm9sPm5vLWNhY2hlPC9DYWNoZS1Db250cm9sPjwvSGVhZGVyPjxD
b250ZW50PjwvQ29udGVudD48L0h0dHBSZXF1ZXN0Pgo=</inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules>
        <rule>
          <sequenceNumber>0</sequenceNumber>
          <name>Accept message if &quot;msg[&apos;Parameters&apos;][&apos;query&apos;].toString()&quot; exists</name>
          <data class="map">
            <entry>
              <string>Name</string>
              <string></string>
            </entry>
            <entry>
              <string>Values</string>
              <list/>
            </entry>
            <entry>
              <string>Field</string>
              <string>msg[&apos;Parameters&apos;][&apos;query&apos;].toString()</string>
            </entry>
            <entry>
              <string>OriginalField</string>
              <string></string>
            </entry>
            <entry>
              <string>Equals</string>
              <string>2</string>
            </entry>
          </data>
          <type>Rule Builder</type>
          <script>if(msg[&apos;Parameters&apos;][&apos;query&apos;].toString().length &gt; 0)
{
return true;
}
return false;</script>
          <operator>NONE</operator>
        </rule>
      </rules>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>db query</name>
      <properties>
        <property name="DataType">Database Writer</property>
        <property name="URL">jdbc:mysql://localhost/cds</property>
        <property name="driver">com.mysql.jdbc.Driver</property>
        <property name="host">query</property>
        <property name="password">yourPassword</property>
        <property name="query"></property>
        <property name="script">// The cds database name, host, port, user &amp; password must be correctly configured in the following connection line:
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;com.mysql.jdbc.Driver&apos;,
                                                                &apos;jdbc:mysql://localhost/cds&apos;,
                                                                &apos;oecuser&apos;,
                                                                &apos;yourPassword&apos;);
var cda_id = channelMap.get(&apos;cda_id&apos;);
var id = channelMap.get(&apos;id&apos;);
var idType = channelMap.get(&apos;idType&apos;);

var column = null;
var value = null;

// We query by one column, preferring the unique cda_id (ignoring the other if set)
if (typeof cda_id != undefined &amp;&amp; cda_id.toString().length &gt; 0) {
	column = &apos;cda_id&apos;;
    value = cda_id.toString();
} else if (typeof id != undefined &amp;&amp; id.toString().length &gt; 0) {
	if (typeof idType != undefined &amp;&amp; idType.toString() == &quot;HDSS&quot;) {
        column = &apos;hdss_id&apos;;
    } else {
	    column = &apos;patient_clinical_id&apos;;
    }
    value = id.toString();
} else {
    var response = ResponseFactory.getFailureResponse(&quot;Either &lt;cda_id/&gt; or &lt;identification/&gt; must be defined&quot;);
    responseMap.put(&quot;httpResponse&quot;, response);
    return;
}

var qs = &quot;SELECT cda_id, patient_clinical_id, hdss_id, last_name, first_name, source_system, cda_dob, gender, &quot;;
    qs += &quot;date_generated, cda FROM cda WHERE &quot; + column + &quot; = ?&quot;;
var params = java.util.ArrayList()
params.add(value);
result = dbConn.executeCachedQuery(qs, params);

// Return zero or more matching CDAs in an xml doc.
var doc = &lt;query_response/&gt;;

while(result.next()) {
    var record = &lt;record/&gt;;
	record.cda_id = result.getInt(1);
	if (result.getString(2)) record.patient_clinical_id = result.getString(2);
	if (result.getString(3)) record.hdss_id = result.getString(3)
    if (result.getString(4)) record.last_name = result.getString(4);
	if (result.getString(5)) record.first_name = result.getString(5);
    if (result.getString(6)) record.source_system = result.getString(6);
	if (result.getString(7)) record.cda_dob = result.getString(7);
    if (result.getString(8)) record.gender = result.getString(8);
    if (result.getString(9)) record.date_generated = result.getString(9);
    record.cda = FileUtil.encode(result.getString(10).getBytes());
    doc.appendChild(record);
}

doc = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;&apos; + doc.toXMLString()
dbConn.close();

// This stores an HTTP 200 (success) with the body &apos;cda&apos; as 
// set above in the response variable &quot;httpResponse&quot;, which
// should be selected as the &quot;Respond From&quot; variable on the source
// tab.
var response = ResponseFactory.getSuccessResponse(doc);
responseMap.put(&quot;httpResponse&quot;, response);</property>
        <property name="useScript">1</property>
        <property name="username">oecuser</property>
      </properties>
      <transformer>
        <steps/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">2</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>